buildscript {
  repositories {
    mavenCentral()
  }
  dependencies {
    // Spring Boot Gradle Plugin 
    classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.2.0.RELEASE'
    // Google App Engine Gradle plugin
    classpath 'com.google.cloud.tools:appengine-gradle-plugin:2.2.0'
  }
}

plugins {
  id 'java'
  // https://plugins.gradle.org/plugin/org.springframework.boot
  id 'org.springframework.boot' version '2.2.0.RELEASE'
  // https://plugins.gradle.org/plugin/io.spring.dependency-management
  id 'io.spring.dependency-management' version '1.0.8.RELEASE'
}

apply plugin: 'com.google.cloud.tools.appengine'

repositories {
  mavenCentral()
}

dependencies {
	//GAE App Engine
  implementation 'com.google.appengine:appengine-api-1.0-sdk:+'
  //websocket
  implementation 'org.springframework.boot:spring-boot-starter-websocket'
  
  //lombok annotation
  compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	
	//swagger - api문서
  implementation 'io.springfox:springfox-swagger2:2.6.1'
	implementation 'io.springfox:springfox-swagger-ui:2.6.1'
	
	//db 관련
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	runtimeOnly 'mysql:mysql-connector-java'
	implementation 'org.springframework.cloud:spring-cloud-gcp-starter-sql-mysql'
	
	//api문서 swagger2
	implementation 'io.springfox:springfox-swagger2:2.6.1'
	implementation 'io.springfox:springfox-swagger-ui:2.6.1'
	
	//security
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
  testImplementation('org.springframework.boot:spring-boot-starter-test') {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
}

test {
  useJUnitPlatform()

  testLogging {
    showStandardStreams true
    events 'started', 'skipped', 'passed', 'failed'
  }
}

group   = "com.ep."
version = "0.0.1"

// Java 11
sourceCompatibility = '11'
targetCompatibility = '11'

appengine {
  deploy {
    projectId = "GCLOUD_CONFIG"
    version = "GCLOUD_CONFIG"
  }
}

appengineDeploy.dependsOn test
appengineStage.dependsOn test

